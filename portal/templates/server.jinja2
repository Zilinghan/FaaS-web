{%extends "base.jinja2"%}

{%block title%}Federation Config{%endblock%}

{%block body%}
  {%include "header.jinja2"%}

  <div class="container">
    <div class="row">
      <div class="page-header col-md-7 col-md-offset-3">
        <h1>Federation Configuration</h1>
      </div>
      <div class="col-md-7 col-md-offset-3">
        <div class="endpoint-status-table">
          <div class="endpoint-status-row">
            <div class="endpoint-status-title first-column"><p>Client Endpoints</p></div>
            <div class="endpoint-status-title second-column"><p>Status</p></div>
            <div class="endpoint-status-title third-column"><p>Email</p></div>
          </div>
          {% for i in range(client_names|length)%}
            <div class="endpoint-status-row">
              <div class="endpoint-status-cell first-column">{{client_names[i]}}</div>
              <div class="endpoint-status-cell second-column">
                {% if client_endpoints[i] == '0'%}
                  {# <img id="status_{{client_names[i]}}_{{client_endpoints[i]}}" src="{{url_for('static', filename='img/unset.png')}}" data-toggle="popover" data-content="The client endpoint is not set or invalid!" data-placement="left" role="button" data-trigger="focus"/> #}
                  <img id="status_{{client_names[i]}}_{{client_endpoints[i]}}" src="{{url_for('static', filename='img/unset-hex.png')}}" tabindex="0" role="button" data-toggle="popover" data-trigger="focus" title="Endpoint Status" data-content="The client endpoint is either unset or invalid!" data-placement="left"/>
                {% else %}
                  {# <img id="status_{{client_names[i]}}_{{client_endpoints[i]}}" src="{{url_for('static', filename='img/loading.gif')}}" data-toggle="popover" data-content="Checking the status of the client endpoint!" data-placement="left" role="button" data-trigger="focus"/> #}
                  <img id="status_{{client_names[i]}}_{{client_endpoints[i]}}" src="{{url_for('static', filename='img/loading.gif')}}" tabindex="0" role="button" data-toggle="popover" data-trigger="focus" title="Endpoint Status" data-content="Checking the status of the client endpoint......" data-placement="left"/>
                {% endif %}
              </div>
              <div class="endpoint-status-cell third-column">
                <a href="mailto:{{client_emails[i]}}"><img src="{{url_for('static', filename='img/email.png')}}" role="button" style="cursor: pointer;"/></a>
              </div>
              
            </div>
          {% endfor %}
          <!-- more rows here -->
        </div>

        <hr style="border-top: 1px solid rgba(128, 128, 128, 0.801) ;" width="100%">
        {# TODO: Let the run of funcx-appfl choose which alg to run#}
        <form role="form" onsubmit="disableSubmitButton()" action="{{url_for('upload_server_config', server_group_id=server_group_id)}}" method="POST" enctype = "multipart/form-data">
          {# Drop-down box for selected federated learning algorithm #}
          {% set fed_algs = ['Federated Average', 'Federated Average Momentum', 'Federated Adagrad', 'Federated Adam', 'Federated Yogi', 'Federated Asynchronous']%}
          {% set fed_algs_func_names = ['ServerFedAvg', 'ServerFedAvgMomentum', 'ServerFedAdagrad', 'ServerFedAdam', 'ServerFedYogi', 'ServerFedAsynchronous']%}
          <div class="form-group-inline">
            <label class="form-label-font">Federation Algorithm</label>
            <select name="fed-alg-select" id="fed-alg-select" class="form-control form-font-small">
            {% for i in range(fed_algs|length)%}
              <option value="{{fed_algs_func_names[i]}}">{{fed_algs[i]}}</option>
            {% endfor %}
            </select>
          </div>

          <hr style="border-top: 1px solid rgba(128, 128, 128, 0.801) ;" width="100%">
          {# Federation Name #}
          <div class="form-group-inline">
            <label>
              Experiment Name 
              <img src="{{url_for('static', filename='img/info2.png')}}" tabindex="0" class="info-icon" role="button" data-toggle="popover" data-trigger="focus" title="Experiment Name" data-content="Please give this federated learning experiment a name of your choice."/>
            </label>
            <input type="text" id="federation-name" name="federation-name" class="form-control" placeholder="federation name" required="required" tabindex="1">
          </div>
          
          {# Training Epoch (Global) #}
          <div class="form-group-inline">
            <label>
              Server Training Epochs
              <img src="{{url_for('static', filename='img/info2.png')}}" tabindex="0" class="info-icon" role="button" data-toggle="popover" data-trigger="focus" title="Server Training Epochs" data-content="Number of training epochs for the federated learning server (i.e., number of aggregations for client models)."/>
            </label>
            <input type="number" id="server-training-epoch" name="server-training-epoch" class="form-control" placeholder="server training epochs" required="required" tabindex="2" min="1" step="1">
          </div>

          {# Training Epoch (Client Local) #}
          <div class="form-group-inline">
            <label>
              Client Training Epochs
              <img src="{{url_for('static', filename='img/info2.png')}}" tabindex="0" class="info-icon" role="button" data-toggle="popover" data-trigger="focus" title="Client Training Epochs" data-content="Number of local training epochs for each federated learning client before send weights back to server."/>
            </label>
            <input type="number" id="client-training-epoch" name="client-training-epoch" class="form-control" placeholder="client training epochs" required="required" tabindex="3" min="1" step="1">
          </div>

          <hr style="border-top: 1px solid rgba(128, 128, 128, 0.801) ;" width="100%">
          {# Server Validation Set for Benchmarking #}
          <label>
          Server Validation Set for Benchmarking
          <img src="{{url_for('static', filename='img/info2.png')}}" tabindex="0" class="info-icon" role="button" data-toggle="popover" data-trigger="focus" title="Server Validation Set for Benchmarking" data-content="If you are running experiments on real datasets, select None. If you are running algorithm benchmarking on dataset MNIST/FEMNIST/CIFAR10, select the corresponding dataset name for the server to load the validation set and do server validation on models."/>
          </label>
          <div>
            <label style="margin-right:10%">
            <input type="radio" name="benchmark-set" value="None" checked> None
            </label>
            <label>
            <input type="radio" name="benchmark-set" value="MNIST"> MNIST
            </label>
          </div>

          <hr style="border-top: 1px solid rgba(128, 128, 128, 0.801) ;" width="100%">
          {# TODO: Probably add some hints on what these mean #}
          {# Privacy Budget #}
          <div class="form-group-inline">
            <label>
              Privacy Budget (\(\epsilon\))
              <img src="{{url_for('static', filename='img/info2.png')}}" tabindex="0" class="info-icon" role="button" data-toggle="popover" data-trigger="focus" title="Privacy Budget" data-content="Stronger privacy as the value decreases, or enter 0 to disable privacy preserving."/>  
            </label>
            {# TODO: What is the valid range for the budget?#}
            <input type="number" id="privacy-budget" name="privacy-budget" class="form-control" placeholder="0 for disabled or number" required="required" tabindex="4" min="0" max="10" step="any">
          </div>

          {# Clip Value #}
          <div class="form-group-inline">
            <label>
              Clip Value
              <img src="{{url_for('static', filename='img/info2.png')}}" tabindex="0" class="info-icon" role="button" data-toggle="popover" data-trigger="focus" title="Clip Value" data-content="TBF."/>  
            </label>
            <input type="number" id="clip-value"" name="clip-value" class="form-control" placeholder="0 for disabled or number" required="required" tabindex="5" min="0" step="any">
          </div>

          {# Clip Norm #}
          <div class="form-group-inline">
            <label>
              Clip Norm
              <img src="{{url_for('static', filename='img/info2.png')}}" tabindex="0" class="info-icon" role="button" data-toggle="popover" data-trigger="focus" title="Clip Norm" data-content="TBF."/> 
            </label>
            <input type="number" id="clip-norm"" name="clip-norm" class="form-control" placeholder="0 for disabled or number" required="required" tabindex="6" min="0" step="any">
          </div>

          {# Further Hyperparameters for Different Fed Algorithms  #}
          <hr style="border-top: 1px solid rgba(128, 128, 128, 0.801); display:none;" width="100%" id="hide-line">
          {# Server Learning Rate #}
          <div class="form-group-inline" style="display:none" id="server-lr-div">
            <label>Server Learning Rate</label>
            <input type="number" id="server-lr"" name="server-lr" class="form-control" value="0.01" required="required" min="1e-10" step="any">
          </div>
          {# Server Adapt Param #}
          <div class="form-group-inline" style="display:none" id="server-adapt-param-div">
            <label>Server Adaptive Param</label>
            <input type="number" id="server-adapt-param"" name="server-adapt-param" class="form-control" value="0.001" required="required" min="1e-10" step="any">
          </div>
          {# Server Momentum #}
          <div class="form-group-inline" style="display:none" id="server-momentum-div">
            <label>Server Momentum</label>
            <input type="number" id="server-momentum"" name="server-momentum" class="form-control" value="0.9" required="required" min="1e-10" step="any">
          </div>
          {# Server Variance Momentum #}
          <div class="form-group-inline" style="display:none" id="server-var-momentum-div">
            <label>Server Var Momentum</label>
            <input type="number" id="server-var-momentum"" name="server-var-momentum" class="form-control" value="0.99" required="required" min="1e-10" step="any">
          </div>
          {# Mixing parameter #}
          <div class="form-group-inline" style="display:none" id="server-mix-param-div">
            <label>Mixing Parameter α</label>
            <input type="number" id="server-mix-param"" name="server-mix-param" class="form-control" value="0.9" required="required" min="1e-10" max="1" step="any">
          </div>
          {# Regularization Strength #}
          <div class="form-group-inline" style="display:none" id="server-reg-strength-div">
            <label>Regularization Strength ρ</label>
            <input type="number" id="server-reg-strength"" name="server-reg-strength" class="form-control" value="0" required="required" min="0" step="any">
          </div>
          {# Staleness Function #}
          {% set staleness_funcs = ['constant', 'polynomial', 'hinge']%}
          <div class="form-group-inline" style="display:none" id="server-sta-func-div">
            <label>Staleness Function</label>
            <select name="server-sta-func" id="server-sta-func" class="form-control form-font-small">
            {% for sta_func in staleness_funcs%}
              <option value="{{sta_func}}">{{sta_func}}</option>
            {% endfor %}
            </select>
          </div>
          {# Staleness Function Parameters #}
          <div class="form-group-inline" style="display:none" id="server-sta-func-param-a-div">
            <label>Parameter a</label>
            <input type="number" id="server-sta-func-param-a"" name="server-sta-func-param-a" class="form-control" value="0.5" required="required" min="1e-10" step="any">
          </div>
          <div class="form-group-inline" style="display:none" id="server-sta-func-param-b-div">
            <label>Parameter b</label>
            <input type="number" id="server-sta-func-param-b"" name="server-sta-func-param-b" class="form-control" value="0" required="required" min="0" step="1">
          </div>

          <hr style="border-top: 1px solid rgba(128, 128, 128, 0.801) ;" width="100%">
          {# Upload Model #}
          <div>
            <label style="margin-right:10%">
            <input type="radio" name="model-type" value="template" checked> Template Model
            </label>
            <label style="margin-right:10%">
            <input type="radio" name="model-type" value="custom"> Custom Model
            </label>
            <label style="margin-right:10%">
            <input type="radio" name="model-type" value="github"> Upload from Github
            </label>
            <label>
            <input type="radio" name="model-type" value="hf"> Upload from Hugging Face
            </label>
          </div>
          {% set models = ['CNN']%}
          <div id="template-models">
          <div class="form-group-inline">
            <label>
              Training Model
              <img src="{{url_for('static', filename='img/info2.png')}}" tabindex="0" class="info-icon" role="button" data-toggle="popover" data-trigger="focus" title="Training Model" data-content="channels: number of channels for input; num classes: number of model output classes; width: input image width; height: input image height"/> 
            </label>
            <select name="training-model" id="training-model" class="form-control form-font-small">
            {% for model in models%}
              <option value="{{model}}">{{model}}</option>
            {% endfor %}
            </select>
          </div>
          {# Model parameters #}
          <div class="form-group-grid" id="model-params-div">
              <label>channels</label>
              <input type="number" id="model-num-channels" name="model-num-channels" class="form-control" placeholder="" required="required" tabindex="6" min="1" step="1">
              <label>num classes</label>
              <input type="number" id="model-num-classes" name="model-num-classes" class="form-control" placeholder="" required="required" tabindex="7" min="1" step="1">
              <label>width</label>
              <input type="number" id="model-input-width" name="model-input-width" class="form-control" placeholder="" required="required" tabindex="8" min="1" step="1">
              <label>height</label>
              <input type="number" id="model-input-height" name="model-input-height" class="form-control" placeholder="" required="required" tabindex="9" min="1" step="1">
          </div>
          </div>

          <div id="custom-models" style="display:none">
            <div class="form-group-inline">
              <label>Model File</label>
              <input
                type="file"
                id="custom-model-file"
                name="custom-model-file"
                class="form-control"
                placeholder="model.py"
                accept=".py"
              >
            </div>
          </div>

          <div id="github-models" style="display:none">
            <div class="form-group">
                <label for="github-repo-name">Repository</label>
                <input type="text" id="github-repo-name" name="github-repo-name" readonly class="form-control" placeholder="No repository selected">
            </div>

            <div class="form-group">
                <label for="github-branch">Branch</label>
                <input type="text" id="github-branch" name="github-branch" readonly class="form-control" placeholder="No branch selected">
            </div>

            <div class="form-group">
                <label for="github-file-path">File</label>
                <input type="text" id="github-file-path" name="github-file-path" readonly class="form-control" placeholder="No file selected">
            </div>

            <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#githubModal">
              Select File
            </button>
          </div>

          <!-- Create the modal to upload model from Github -->
          <div class="modal fade" id="githubModal" tabindex="-1" role="dialog" aria-labelledby="githubModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
              <div class="modal-content">
                <div class="modal-header">
                <h4 class="modal-title" id="githubModalLabel">Select File</h4>
                <input type="text" id="searchInput" style="margin-top:15px" onkeyup="searchFiles()" placeholder="Search for ...">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
                <div style="position:absolute; right:50px; top:15px;">
                  <a href="#" onclick="return openAndWatchWindow()" style="margin-top:10px" class="btn btn-link" target="_blank">Authorize with GitHub</a>
                </div>
              </div>
                <div class="list-group" id="githubModalBody">
                  <!-- The repositories will be loaded here -->
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" onclick="goBack();">Back</button>
                </div>
              </div>
            </div>
          </div>

          <div id="hf-models" style="display:none">
            <div class="form-group">
                <label for="hf-model-name">Model</label>
                <input type="text" id="hf-model-name" name="hf-model-name" readonly class="form-control" placeholder="No model selected">
            </div>

            <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#hfModal">
              Select Model
            </button>
          </div>

          <!-- Create the modal to upload model from hugging face -->
          <div class="modal fade" id="hfModal" tabindex="-1" role="dialog" aria-labelledby="hfModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="hfModalLabel">Select Hugging Face Model</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <!-- Model Name -->
                            <div class="form-group">
                                <label for="hfModelInput">Model Name</label>
                                <input type="text" class="form-control" id="hfModelInput" placeholder="Search for models...">
                            </div>

                            <!-- Task -->
                            <div class="form-group">
                                <label for="hfModelTask">Task</label>
                                <input type="text" class="form-control" id="hfModelTask" placeholder="Filter by task">
                            </div>

                            <!-- Library -->
                            <div class="form-group">
                                <label for="hfModelLibrary">Library</label>
                                <input type="text" class="form-control" id="hfModelLibrary" placeholder="Filter by library">
                            </div>

                            <!-- Trained Dataset -->
                            <div class="form-group">
                                <label for="hfModelDataset">Trained Dataset</label>
                                <input type="text" class="form-control" id="hfModelDataset" placeholder="Filter by trained dataset">
                            </div>

                            <!-- Author -->
                            <div class="form-group">
                                <label for="hfModelAuthor">Author</label>
                                <input type="text" class="form-control" id="hfModelAuthor" placeholder="Filter by author">
                            </div>
                        </form>
                        <div class="list-group" id="hfModalBody">
                          <!-- The models will be loaded here -->
                        </div>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-primary" onclick="getModels()">Search</button>
                    </div>
                </div>
            </div>
        </div>



          <hr style="border-top: 1px solid rgba(128, 128, 128, 0.801) ;" width="100%">
          {# Hyperparameters for client-side optimizer #}
          {# TODO: What else optimizer can be included in addition to SGD#}
          {# TODO: What else hyperparameters to set in addition to learning rate #} 
          {# Client Optimizer #}
          {% set client_optims = ['SGD', 'Adam']%}
          <div class="form-group-inline">
            <label>Client Optimizer</label>
            <select name="client-optimizer" id="client-optimizer" class="form-control form-font-small">
            {% for optim in client_optims%}
              <option value="{{optim}}">{{optim}}</option>
            {% endfor %}
            </select>
          </div>
          {# Client Learning Rate#}
          <div class="form-group-inline">
            <label>Client Learning Rate</label>
            <input type="number" id="client-lr" name="client-lr" class="form-control" value="0.01" required="required" tabindex="10" min="1e-10" step="any">
          </div>
          {# Client Learning Rate Decay#}
          <div class="form-group-inline">
            <label>Client Learning Rate Decay</label>
            <input type="number" id="client-lr-decay" name="client-lr-decay" class="form-control" value="0.975" required="required" tabindex="11" min="1e-10" max="1" step="any">
          </div>

          {# Client Weights #}
          <div class="form-group-inline">
            <label>Client Weights</label>
            <select name="client-weights" id="client-weights" class="form-control form-font-small">
              <option value="sample_size">Proportional to Sample Size</option>
              <option value="equal">Equal for All Clients</option>
            </select>
          </div>

          <hr style="border-top: 1px solid rgba(128, 128, 128, 0.801) ;" width="100%">

          {# Submit Buttons #}
          <div class="form-group">
            <button class="btn btn-secondary" onclick="disableBackButton()" id="server-config-page-back-btn">Back</button>
            <button type="submit" class="btn btn-primary" id="server-config-page-start-btn" >Start</button>
          </div>
        </form>

        {# TODO: We can support more federated algorithm later#}

      </div>
    </div>

  </div> <!-- container -->

  <script>
    // Github code
    // Keep track of the path history to go back to previous folder in Github
    var pathStack = [];

    // RepoState class
    class RepoState {
      constructor() {
      }
    }

    // BranchState class
    class BranchState {
      constructor(owner, repoName) {
        this.owner = owner;
        this.repoName = repoName;
      }
    }

    // PathState class
    class PathState {
      constructor(owner, repoName, branchName, path) {
        this.owner = owner;
        this.repoName = repoName;
        this.branchName = branchName;
        this.path = path;
      }
    }

    // Bind to the back button in the modal
    function goBack() {
        if (pathStack.length === 1) {
            $('#githubModal').modal('hide'); // Close the modal
            return;
        }
        pathStack.pop();  // Remove the current state
        var lastState = pathStack[pathStack.length - 1];  // Get the last state
        if (lastState instanceof RepoState) {
            getRepos(true);
        } else if (lastState instanceof BranchState) {
            getRepoBranches(lastState.owner, lastState.repoName, true);
        } else if (lastState instanceof PathState) {
            getRepoFiles(lastState.owner, lastState.repoName, lastState.branchName, lastState.path, true);
        }
    }

    $('#githubModal').on('show.bs.modal', () => getRepos(false));
    $('#githubModal').on('hide.bs.modal', function (event) {
        $("#githubModalBody").empty();
        pathStack = [];
    });

    function openAndWatchWindow() {
        var newWindow = window.open('{{ auth_url }}', 'newwindow', 'width=600,height=600');

        var checkWindowClosed = setInterval(function() {
            if (newWindow.closed) {
                clearInterval(checkWindowClosed);
                getRepos(false);
            }
        }, 500);  // Check every 500 ms

        return false;
    }

    var reposArray = [];
    var branchesArray = [];
    var filesArray = [];

    function searchFiles() {
        var query = document.getElementById('searchInput').value.toUpperCase();
        var filteredArray = [];

        var lastState = pathStack[pathStack.length - 1];  // Get the last state
        if (lastState instanceof RepoState) {
            filteredArray = reposArray.filter(function(repo) {
              return repo.name.toUpperCase().includes(query);
            });
            displayRepos(filteredArray);
        } else if (lastState instanceof BranchState) {
            filteredArray = branchesArray.filter(function(branch) {
              return branch.name.toUpperCase().includes(query);
            });
            displayBranches(lastState.owner, lastState.repoName, filteredArray);
        } else if (lastState instanceof PathState) {
            filteredArray = filesArray.filter(function(file) {
              return file.name.toUpperCase().includes(query);
            });
            displayFiles(lastState.owner, lastState.repoName, lastState.branchName, lastState.path, filteredArray);
        }
    }

    function getRepos(back = false) {
        // Check if 'back' is an event object and if so, default it to false
        if (typeof back === 'object' && back instanceof Event) {
            back = false;
        }
        if (back === false) {
            var repoState = new RepoState();
            pathStack.push(repoState);
        }

        // Make an AJAX request to get the repositories
        $.get("/github_integration/github_callback", function(data){
            reposArray = data;
            displayRepos(data);
        });
    }

    function displayRepos(data) {
        // Clear the modal body
        $("#githubModalBody").empty();

        // No repos are fetched
        if (typeof data == "string") {
          return;
        }

        // Add each repository to the modal body
        $.each(data, function(index, repo) {
            $("#githubModalBody").append(`
                <a href="#" class="list-group-item list-group-item-action" onclick="getRepoBranches('${repo.owner.login}', '${repo.name}');">${repo.name}</a>
            `);
        });
    }

    function getRepoBranches(owner, repoName, back = false) {
        if (back === false) {
            var branchState = new BranchState(owner, repoName);
            pathStack.push(branchState);
        }

        // Make an AJAX request to get the repository branches
        $.get(`/github_integration/selected_repo/${owner}/${repoName}/branches`, function(data){
            branchesArray = data;
            displayBranches(owner, repoName, data);
        });
    }

    function displayBranches(owner, repoName, data) {
        // Clear the modal body
        $("#githubModalBody").empty();

        // Add each branch to the modal body
        $.each(data, function(index, branch) {
            $("#githubModalBody").append(`<a href="#" class="list-group-item list-group-item-action" onclick="getRepoFiles('${owner}', '${repoName}', '${branch.name}');">${branch.name}</a>`);
        });
    }

    function getRepoFiles(owner, repoName, branchName, path = '', back = false) {
        if (back === false) {
            var pathState = new PathState(owner, repoName, branchName, path)
            pathStack.push(pathState); 
        }

        // Make an AJAX request to get the repository files
        $.get(`/github_integration/selected_repo/${owner}/${repoName}/${branchName}/${path}`, function(data){
            filesArray = data;
            displayFiles(owner, repoName, branchName, path, data);
        });
    }

    function displayFiles(owner, repoName, branchName, path, data) {
        // Clear the modal body
        $("#githubModalBody").empty();

        // Iterate over each file in data
        $.each(data, function(index, file) {
            // Check if the file is a directory
            if(file.type == "dir") {
                // If the file is a directory, add a click handler to the paragraph that will call getRepoFiles
                var dirElement = $('<a/>')
                                    .addClass("list-group-item list-group-item-action")
                                    .attr("href", "#")
                                    .text(file.name)
                                    .on('click', function() {
                                        getRepoFiles(owner, repoName, branchName, file.path);
                                    });
                $("#githubModalBody").append(dirElement);
            } else {
                // If the file is not a directory, just display its name
                var fileElement = $('<a/>')
                                    .addClass("list-group-item list-group-item-action")
                                    .text(file.name)
                                    .on('click', function() {
                                        $("#github-repo-name").val(repoName);
                                        $("#github-branch").val(branchName);
                                        $("#github-file-path").val(file.path);
                                        $('#githubModal').modal('hide');
                                    });
                $("#githubModalBody").append(fileElement);
            }
        });
    }

    // Hugging Face (hf) code
    $(document).ready(function() {
        $('#hfModal').on('hide.bs.modal', function (event) {
            // This function will be called when the modal is about to be hidden
            $("#hfModalBody").empty();
        });
    });

    var modelsArray = [];

    {# function filterModels() {
        var query = document.getElementById('hfModelInput').value.toUpperCase();
        var filteredArray = modelsArray.filter(function(model) {
          return model.toUpperCase().includes(query);
        });
        console.log(filteredArray);
        displayModels(filteredArray);
    } #}

    function getModels() {
      console.log("call get models")
        // Make an AJAX request to get the models
        var modelName = $('#hfModelInput').val();
        var task = $('#hfModelTask').val();
        var library = $('#hfModelLibrary').val();
        var dataset = $('#hfModelDataset').val();
        var author = $('#hfModelAuthor').val();

        $.get("/hugging_face_integration/models", {
            model_name: modelName,
            task: task,
            library: library,
            dataset: dataset,
            author: author
        }, function(data){
            modelsArray = data;
            displayModels(data);
        });
    }

    function displayModels(data) {
        // Clear the modal body
        $("#hfModalBody").empty();

        // Add each model to the modal body
        $.each(data, function(index, model) {
            $("#hfModalBody").append(`
                <a href="#" class="list-group-item list-group-item-action" onclick="selectModel('${model}');">${model}</a>
            `);
        });
    }

    function selectModel(modelName) {
        // Fill the model name in the model name box
        $("#hf-model-name").val(modelName);
    }

    $('#hfModal').on('hide.bs.modal', function (event) {
        $("#hfModalBody").empty();
    });

    function disableBackButton() {
      document.getElementById('server-config-page-back-btn').disabled = true;
      window.location.href='{{ url_for( 'dashboard') }}';
    }
    function disableSubmitButton() {
      var submitButton = document.getElementById('server-config-page-start-btn');
      submitButton.disabled = true;
    }
    $(document).ready(function() {
      $(function () {
        $('[data-toggle="popover"]').popover()
      })

      {# Endpoint Health Status Check #}
      // Obtain the given endpoints to send, and generate an endpoint-name dictionary
      var client_endpoints = {{client_endpoints|safe}};
      var client_names = {{client_names|safe}}
      var sent_data= {};
      var endpoint_name_dict = {}
      for (var i = 0; i < client_endpoints.length; i++){
        if (client_endpoints[i] != '0') {
          sent_data[i] = client_endpoints[i];
          endpoint_name_dict[client_endpoints[i]] = client_names[i];
        }
      }
      {# console.log(endpoint_name_dict)
      console.log(sent_data); #}
      // Send the endpoints for status checking
      $.ajax({
        url: '/status-check',
        method: 'GET',
        data: {endpoints: sent_data},
        contentType: 'multipart/form-data',
        success: function(resp){
          {# var resp = {{resp|safe}}; #}
          console.log(Object.keys(resp))
          var endpoints = Object.keys(resp);
          for (var i = 0; i < endpoints.length; i++) {
            if (resp[endpoints[i]] == '0') {
              document.getElementById(`status_${endpoint_name_dict[endpoints[i]]}_${endpoints[i]}`).src = '{{url_for('static', filename='img/inactive-hex.png')}}';
              document.getElementById(`status_${endpoint_name_dict[endpoints[i]]}_${endpoints[i]}`).setAttribute('data-content', 'The client endpoint is inactive or stopped!');
            }
            else if (resp[endpoints[i]] == '1') {
              document.getElementById(`status_${endpoint_name_dict[endpoints[i]]}_${endpoints[i]}`).src = '{{url_for('static', filename='img/set-hex.png')}}';
              document.getElementById(`status_${endpoint_name_dict[endpoints[i]]}_${endpoints[i]}`).setAttribute('data-content', 'The client endpoint is active with CPU available!'); 
            }
            else if (resp[endpoints[i]] == '2') {
              document.getElementById(`status_${endpoint_name_dict[endpoints[i]]}_${endpoints[i]}`).src = '{{url_for('static', filename='img/set-hex.png')}}';
              document.getElementById(`status_${endpoint_name_dict[endpoints[i]]}_${endpoints[i]}`).setAttribute('data-content', 'The client endpoint is active with GPU available!');
            }
            else {
              document.getElementById(`status_${endpoint_name_dict[endpoints[i]]}_${endpoints[i]}`).src = '{{url_for('static', filename='img/unset-hex.png')}}';
              document.getElementById(`status_${endpoint_name_dict[endpoints[i]]}_${endpoints[i]}`).setAttribute('data-content', 'The client endpoint is either unset or invalid!');
            }
          }
        }
      })
      // Radio Button for Model Type Selection
      const modelTypes = document.getElementsByName('model-type');

      modelTypes[0].addEventListener('click', function(){
        // Display the template model parameter selection div
        document.getElementById('template-models').style.display = "block";
        document.getElementById('custom-models').style.display = "none";
        document.getElementById('github-models').style.display = "none";
        document.getElementById('hf-models').style.display = "none";
        // Change the input requirements
        const modelParamDiv = document.getElementById("model-params-div");
        const modelParams = modelParamDiv.querySelectorAll("input");
        for (let i = 0; i < modelParams.length; i++) {
          console.log(modelParams[i].required);
          modelParams[i].required = true;
        }
        document.getElementById("custom-model-file").required=false;
        document.getElementById("github-file-path").required=false;
        document.getElementById("hf-model-name").required=false;
      });

      modelTypes[1].addEventListener('click', function(){
        // Display the custome model update div
        document.getElementById('template-models').style.display = "none";
        document.getElementById('custom-models').style.display = "block";
        document.getElementById('github-models').style.display = "none";
        document.getElementById('hf-models').style.display = "none";
        // Change the input requirements
        const modelParamDiv = document.getElementById("model-params-div");
        const modelParams = modelParamDiv.querySelectorAll("input");        
        for (let i = 0; i < modelParams.length; i++) {
          console.log(modelParams[i].required);
          modelParams[i].required = false;
        }
        document.getElementById("custom-model-file").required=true;
        document.getElementById("github-file-path").required=false;
        document.getElementById("hf-model-name").required=false;
      });

      modelTypes[2].addEventListener('click', function(){
        // Display the custome model update div
        document.getElementById('template-models').style.display = "none";
        document.getElementById('custom-models').style.display = "none";
        document.getElementById('github-models').style.display = "block";
        document.getElementById('hf-models').style.display = "none";
        // Change the input requirements
        const modelParamDiv = document.getElementById("model-params-div");
        const modelParams = modelParamDiv.querySelectorAll("input");        
        for (let i = 0; i < modelParams.length; i++) {
          console.log(modelParams[i].required);
          modelParams[i].required = false;
        }
        document.getElementById("custom-model-file").required=false;
        document.getElementById("github-file-path").required=true;
        document.getElementById("hf-model-name").required=false;
      });

      modelTypes[3].addEventListener('click', function(){
        // Display the custome model update div
        document.getElementById('template-models').style.display = "none";
        document.getElementById('custom-models').style.display = "none";
        document.getElementById('github-models').style.display = "none";
        document.getElementById('hf-models').style.display = "block";
        // Change the input requirements
        const modelParamDiv = document.getElementById("model-params-div");
        const modelParams = modelParamDiv.querySelectorAll("input");        
        for (let i = 0; i < modelParams.length; i++) {
          console.log(modelParams[i].required);
          modelParams[i].required = false;
        }
        document.getElementById("custom-model-file").required=false;
        document.getElementById("github-file-path").required=false;
        document.getElementById("hf-model-name").required=true;
      });


      $('#fed-alg-select').change(function() {
        var selectedAlg = $(this).val();
        console.log(selectedAlg);
        if (selectedAlg == 'ServerFedAvg') {
          document.getElementById('hide-line').style.display = "none";
          document.getElementById('server-lr-div').style.display = "none";
          document.getElementById('server-adapt-param-div').style.display = "none";
          document.getElementById('server-momentum-div').style.display = "none";
          document.getElementById('server-var-momentum-div').style.display = "none";

          document.getElementById('server-mix-param-div').style.display = "none";
          document.getElementById('server-reg-strength-div').style.display = "none";
          document.getElementById('server-sta-func-div').style.display = "none";
          document.getElementById('server-sta-func').value = "constant";
          document.getElementById('server-sta-func-param-a-div').style.display = "none";
          document.getElementById('server-sta-func-param-b-div').style.display = "none";
        }
        else if (selectedAlg == 'ServerFedAvgMomentum') {
          document.getElementById('hide-line').style.display = "block";
          document.getElementById('server-lr-div').style.display = "none";
          document.getElementById('server-adapt-param-div').style.display = "none";
          document.getElementById('server-momentum-div').style.display = "flex";
          document.getElementById('server-var-momentum-div').style.display = "none";

          document.getElementById('server-mix-param-div').style.display = "none";
          document.getElementById('server-reg-strength-div').style.display = "none";
          document.getElementById('server-sta-func-div').style.display = "none";
          document.getElementById('server-sta-func').value = "constant";
          document.getElementById('server-sta-func-param-a-div').style.display = "none";
          document.getElementById('server-sta-func-param-b-div').style.display = "none";
        }
        else if (selectedAlg == 'ServerFedAdagrad') {
          document.getElementById('hide-line').style.display = "block";
          document.getElementById('server-lr-div').style.display = "flex";
          document.getElementById('server-adapt-param-div').style.display = "flex";
          document.getElementById('server-momentum-div').style.display = "flex";
          document.getElementById('server-var-momentum-div').style.display = "none";

          document.getElementById('server-mix-param-div').style.display = "none";
          document.getElementById('server-reg-strength-div').style.display = "none";
          document.getElementById('server-sta-func-div').style.display = "none";
          document.getElementById('server-sta-func').value = "constant";
          document.getElementById('server-sta-func-param-a-div').style.display = "none";
          document.getElementById('server-sta-func-param-b-div').style.display = "none";
        }
        else if (selectedAlg == 'ServerFedAdam' || selectedAlg == 'ServerFedYogi') {
          document.getElementById('hide-line').style.display = "block";
          document.getElementById('server-lr-div').style.display = "flex";
          document.getElementById('server-adapt-param-div').style.display = "flex";
          document.getElementById('server-momentum-div').style.display = "flex";
          document.getElementById('server-var-momentum-div').style.display = "flex";

          document.getElementById('server-mix-param-div').style.display = "none";
          document.getElementById('server-reg-strength-div').style.display = "none";
          document.getElementById('server-sta-func-div').style.display = "none";
          document.getElementById('server-sta-func').value = "constant";
          document.getElementById('server-sta-func-param-a-div').style.display = "none";
          document.getElementById('server-sta-func-param-b-div').style.display = "none";
        }
        else if (selectedAlg == 'ServerFedAsynchronous') {
          document.getElementById('hide-line').style.display = "block";
          document.getElementById('server-lr-div').style.display = "none";
          document.getElementById('server-adapt-param-div').style.display = "none";
          document.getElementById('server-momentum-div').style.display = "none";
          document.getElementById('server-var-momentum-div').style.display = "none";

          document.getElementById('server-mix-param-div').style.display = "flex";
          document.getElementById('server-reg-strength-div').style.display = "flex";
          document.getElementById('server-sta-func-div').style.display = "flex";
          document.getElementById('server-sta-func').value = "constant";
          document.getElementById('server-sta-func-param-a-div').style.display = "none";
          document.getElementById('server-sta-func-param-b-div').style.display = "none";
        }
      });
      $('#client-optimizer').change(function(){
        var selectedOptim = $(this).val();
        if (selectedOptim == 'SGD') {
          document.getElementById('client-lr').value = "0.01";
        }
        else if (selectedOptim == 'Adam') {
          document.getElementById('client-lr').value = '0.001';
        }
      });
      $('#server-sta-func').change(function(){
        var selectedStalenessFunc = $(this).val();
        if (selectedStalenessFunc == 'constant'){
          document.getElementById('server-sta-func-param-a-div').style.display = "none";
          document.getElementById('server-sta-func-param-b-div').style.display = "none";
        }
        else if (selectedStalenessFunc == 'polynomial'){
          document.getElementById('server-sta-func-param-a-div').style.display = "flex";
          document.getElementById('server-sta-func-param-b-div').style.display = "none";
        }
        else if (selectedStalenessFunc == 'hinge'){
          document.getElementById('server-sta-func-param-a-div').style.display = "flex";
          document.getElementById('server-sta-func-param-b-div').style.display = "flex";
        }
      })
    });
  </script>
{%endblock%}

